@mixin centered-absolute{
    position: absolute;
    top:50%;
    left:50%;
    transform: translate(-50%,-50%);
}

@mixin align-right{
    position: absolute;
    top:50%;
    right:0;
    transform: translateY(-50%);
}

//genereate columns width in a old-fashion grid & flexbox grid systems
@mixin set-column-width($column-prefix, $element){
    $column-width: 8.33;
    @for $i from 1 through 12 {
        $width: $column-width * $i;
        @if $i % 3 == 0 {
            $width: round($column-width * $i);
        }
        @else{
            @if $width < round($width){
                $width: floor($width)+0.66;
            }
            @else{
                $width: floor($width)+0.33;
            }
        }

        @if $element == 'flex'{
            $width: $width + %;
            .flex-#{$column-prefix}-#{$i} {
                flex: 0 0 calc(#{$width} - #{$flex-grid-gap}); 
                max-width: calc(#{$width} - #{$flex-grid-gap}); 
            }
        }
        @else{
            .col-#{$column-prefix}-#{$i} {
                width: $width + %; 
            }
        }
    }
}

//set margin-left to columns

@mixin set-offset($start, $stop){
    
    @for $i from $start through $stop {
        $margin: 8.33 * $i;
        @if $i % 3 == 0 {
            margin: round($margin * $i);
        }
        @else{
            @if $margin < round($margin){
                $margin: floor($margin)+0.66;
            }
            @else{
                $margin: floor($margin)+0.33;
            }
        }
        .offset-#{$i} {
            margin-left: $margin+%; 
        }
    }
}

//generate grid items in a css grid layout
@mixin grid-items($prefix){
   
     $columns: 1,
               2,
               3,
               4,
               5,
               6,
               7,
               8,
               9,
               10,
               11,
               12;

    @each $item in $columns{
           $stop: $item + 1;
           $max-point:13 - nth($item, 1);
           @for $i from 1 through $max-point {
            .item-#{$prefix}-#{nth($item, 1)}-#{$i}{
                 grid-column-start:$i;
                 grid-column-end:$stop;
               }
               $stop: $i + ($item + 1);
           }
      
    }

}